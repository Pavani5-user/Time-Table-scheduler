#include<bits/stdc++.h>
using namespace std ;
#define endl "\n"
void clearScreen() 
{
    cout<<"\033[2J\033[1;1H";
}

void start();
void initialize(int n1, string arr1[], int n2, string arr2[], int n3, string arr3[],int n4, string arr4[], map<string, vector<string>> &adj, map<string,int> &color);
map<int, vector<string>> schedule(map<string, vector<string>> &adj, map<string, int> &color, int &max_days);
void display(int days, map<int, vector<string>> &hash, string name, int semester);


int32_t main()
{   
    bool choice = false;
    do {
        start();
        cout<<"\n\n\t \t\t\t\tDo You wish to continue Again.. Press (1 for Yes) & (2 for No): ";
        string inp; 
        cin>>inp;
        if(inp=="1") 
        choice = true; 
        else 
        choice = false;
        clearScreen();
    } while(choice);
	return 0;
}

void start()
 {
    cout<<"\n\n\n\t\t---------------------------- Welcome To Time Table Scheduling using Graph Coloring ------------------------\n\n\n\n";
    cout<<"\t\t\tEnter the Name of Your College: ";
    string name;
    getline(cin,name);
    cout<<"\n\t\t\tEnter the type of Semester; 1.ODD 2.EVEN : ";//2
    int semester;  
    cin>>semester;
    
    // Clearing Screen
    clearScreen();
    if(semester==1)
    cout<<"\n\n\t\t\tEnter no. of "<<semester<<"st Semester subjects: ";
    else 
    cout<<"\n\n\t\t\tEnter no. of "<<semester<<"nd Semester subjects: ";
    int n1;
    cin>>n1;
    cout<<"\n\t\t\tEnter the course names: ";
    string arr1[n1];
    for(int i=0;i<n1;i++) 
    cin>>arr1[i];

    // Clearing Screen
    clearScreen();
    
    cout<<"\n\n\t\t\tEnter "<<(semester==1?"3rd":"4th")<<" Semester subjects including the previous semester overload(backlog) subjects(if any):  ";
    int n2; 
    cin>>n2;
    cout<<"\n\t\t\tEnter the course names: ";
    string arr2[n2];
    for(int i=0;i<n2;i++)
    cin>>arr2[i];
    
    // Clearing Screen
    clearScreen();

    cout<<"\n\t\t\tEnter "<<(semester==1?"5th":"6th")<<" Semester subjects including the previous semster overload(backlog) subjects(if any): ";
    int n3; 
    cin>>n3;
    string arr3[n3];
    cout<<"\n\t\t\tEnter the course names: ";
    for(int i=0;i<n3;i++)cin>>arr3[i];

    // Clearing Screen
    clearScreen();

    cout<<"\n\t\t\tEnter "<<(semester==1?"7th":"8th")<<" Semester subjects including the previous semster overload(backlog) subjects(if any): ";
    int n4; 
    cin>>n4;
    string arr4[n4];
    cout<<"\n\t\t\tEnter the course names ";
    for(int i=0;i<n4;i++)cin>>arr4[i];

    // Clearing Screen
    clearScreen();
    
    // Initializing Graph 
    map<string, vector<string>> adj; //1 key(string)-value(vector)
    map<string, int> color; //2 key(string) value(int)
    initialize(n1,arr1,n2,arr2,n3,arr3,n4,arr4, adj, color);
    
    // Scheduling the Slots
    int max_days=-1;
    map<int, vector<string>> exam_schedule = schedule(adj,color, max_days);
    
    // Displaying the Results 
    display(max_days, exam_schedule, name, semester);
    
}

void initialize(int n1, string arr1[], int n2, string arr2[], int n3, string arr3[], int n4, string arr4[], map<string, vector<string>> &adj, map<string, int> &color) 
{
     map<string, vector<string>> :: iterator itrtr;
     for(int i=0;i<n1; i++) 
    {
        for(int j=0;j<n1; j++) 
        {
            if(i!=j)
            adj[arr1[i]].push_back(arr1[j]);
            
        }

    }


    for(int i=0;i<n2; i++) 
    {
        for(int j=0;j<n2; j++) 
        {
            if(i!=j)
            adj[arr2[i]].push_back(arr2[j]);
        }
    }


    for(int i=0;i<n3; i++) 
    {
        for(int j=0;j<n3; j++)
        {
            if(i!=j)
            adj[arr3[i]].push_back(arr3[j]);
        }
    }


    for(int i=0;i<n4; i++) 
    {
        for(int j=0;j<n4; j++)
        {
            if(i!=j)
            adj[arr4[i]].push_back(arr4[j]);
        }
    }


    //Initialize the color of each node to -1


    for(auto x: adj)
    {
        color[x.first]=-1;    // all nodes color int value will be -1
    }

    color[adj.begin()->first]=1;        // first node color value is 1

    vector<bool> alreadyAssigned(n1+n2+n3+n4);

    auto it= adj.begin();
    it++;
    map<string, vector<string>>::iterator i;

    for(i=it; i!=adj.end(); i++) 
    {
        fill(alreadyAssigned.begin(), alreadyAssigned.end(), false);

        for (auto av : adj[i->first])
          {
              if (color[av]!= -1)
            {  
                alreadyAssigned[color[av]] = true;
            }  
        }

       /* for(auto &pr: color)
            {
             cout<<pr.first<<" "<<pr.second<<endl;
            }
        */

        int c;
        for (c = 1; c <= n1+n2+n3+n4 ; c++)
            if (alreadyAssigned[c] == false)
                break;
          

        color[i->first] = c;
 
    }

}





map<int, vector<string>> schedule(map<string, vector<string>> &adj, map<string, int> &color, int &max_days) 
{
    map<int, vector<string>> hash;
    for (auto ele: adj) 
    {
        cout << "Vertex  " << ele.first << " ---> Color " << color[ele.first] << endl;
        hash[color[ele.first]].push_back(ele.first);
        //cout<<color[ele.first]<<" "; 
       // cout<<ele.second;
    }

    int mx=INT_MIN;
    for(auto ele: color)
    {
        mx= max(mx, ele.second);
        //cout<<ele.second<<" ";
    }
    map<int, vector<string>> :: iterator itrtr;
    cout << "\nNumber of colors required: " << mx << endl;
    
    max_days=mx;
    
    return hash;
}

void display(int days, map<int, vector<string>> &hash, string name, int semester) 
{
    
    cout<<"\n\t\t\tMaximum number of Days to complete examinations for all semesters would be: "<<days<<"\n";
    int check;
    do
    {
    cout<<"\n\t\t\tHow many Maximum number of Slots per Day you Want? ";
    int slots; 
    cin>>slots;
    
    // Clearing Screen
    clearScreen();
    
    cout<<"\n\n\t\t----------------------------- Examination Schedule ------------------------------";
    cout<<"\n\n\t\t\t\t\tCollege: "<<name<<"\tSemester: "<<((semester==1?"ODD":"EVEN"));

    int day_cnt=1, slot_cnt=1; 
    cout<<"\n\n\t\t\t-----------------------Day "<<day_cnt<<"-----------------------\n\n";
    for(auto it: hash)
     {
        cout<<"\t\t\t\tSlot "<<slot_cnt<<" -> ";
        for(auto k: it.second) 
        cout<<k<<"  ";
        cout<<"\n";
        slot_cnt++;
        if(slot_cnt>slots)
        {
            day_cnt++;
            slot_cnt=1;
            cout<<"\n\t\t\t-----------------------Day "<<day_cnt<<"-----------------------\n\n";
        }
    }
       
       cout<<"\n \t\t\t\t Do you want to check the time table for different number of slots 1.YES 2.NO : ";
       
       cin>>check;
    } while (check==1);
    

}
